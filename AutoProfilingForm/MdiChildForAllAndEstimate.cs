using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using ChartDirector;

namespace AutoProfilingForm
{

    /// <summary>
    /// this form is for analysis all charactor and show the etimated result which is generated by machine learning.
    /// </summary>
    public partial class MdiChildForAllAndEstimate : Form
    {
        private static MdiChildForAllAndEstimate _frmForAllAndEstimate = null;

        public static MdiChildForAllAndEstimate GetForm()
        {
            if (_frmForAllAndEstimate == null)
            {
                _frmForAllAndEstimate = new MdiChildForAllAndEstimate();
            }
            return _frmForAllAndEstimate;
        }
        public MdiChildForAllAndEstimate()
        {
            InitializeComponent();
        }
        private void Dispose()
        {
            Dispose(true);
            _frmForAllAndEstimate = null;
        }
        public void Close()
        {
            Dispose();
        }
        ~MdiChildForAllAndEstimate()
        {
            Dispose(true);
        }

        private void MdiChildForAllAndEstimate_FormClosing(object sender, FormClosingEventArgs e)
        {
            _frmForAllAndEstimate.Close();
            _frmForAllAndEstimate = null;
        }

        // choose the folder
        private FolderBrowserDialog ifbDialog = null;
        private void button3_Click(object sender, EventArgs e)
        {
            ifbDialog = new FolderBrowserDialog();
            ifbDialog.ShowNewFolderButton = true;
            //ifbDialog.ShowDialog();
            DialogResult ifResult = ifbDialog.ShowDialog();
            if (ifResult == DialogResult.OK)
            {
                this.textBoxHomeFolder.Text = ifbDialog.SelectedPath;
            }
        }

        private OpenFileDialog iofDialog = null;
        // choose the input file (.second.log)
        private void buttonOpenInputFile_Click(object sender, EventArgs e)
        {
            iofDialog = new OpenFileDialog();
            DialogResult iofResult = iofDialog.ShowDialog();
            if (iofResult == DialogResult.OK)
            {
                this.textBoxInputFileName.Text = iofDialog.FileName;
          }
        }

        private bool showCpu;
        private bool showGpu;
        private bool showCmd;
        private bool showFps;
        private bool showObj;
        private bool showTriangle;
        private bool showDrawTime;
        private bool showDataSize;
        private bool showIbLock;
        private bool showIbSize;
        private bool showVbLock;
        private bool showVbSize;
        private bool showParamSize;
        private bool showRemoteParamSize;
        private bool showSurLock;
        private bool showSurSize;
        private bool showTexLock;
        private bool showTexSize;
        private bool showSetTexTime;
        private bool showStateBlock;
        private bool showVShaderCmd;
        private bool showVShaderConst;
        private bool showPShaderCmd;
        private bool showPShaderConst;

        private void buttonClear_Click(object sender, EventArgs e)
        {
            //showCpu = false;
            showCmd = false;
            showDataSize = false;
            showDrawTime = false;
            //showFps = false;
            //showGpu = false;
            showIbLock = false;
            showIbSize = false;
            showObj = false;
            showParamSize = false;
            showPShaderCmd = false;
            showPShaderConst = false;
            showRemoteParamSize = false;
            showSetTexTime = false;
            showStateBlock = false;
            showSurLock = false;
            showSurSize = false;
            showTexLock = false;
            showTexSize = false;
            showTriangle = false;
            showVbLock = false;
            showVbSize = false;
            showVShaderCmd = false;
            showVShaderConst = false;

            // set the check box false
            // checkBoxCpu.Checked = false;
            //checkBoxGpu.Checked = false;
            checkBoxCmd.Checked = false;
            checkBoxObj.Checked = false;
            checkBoxTriangle.Checked = false;
            checkBoxDraw.Checked = false;
            checkBoxData.Checked = false;
            checkBoxIbLock.Checked = false;
            checkBoxIbSize.Checked = false;
            checkBoxVbLock.Checked = false;
            checkBoxVbSize.Checked = false;
            checkBoxParamSize.Checked = false;
            checkBoxRemoteParamSize.Checked = false;
            checkBoxSurLock.Checked = false;
            checkBoxSurSize.Checked = false;
            checkBoxTexLock.Checked = false;
            checkBoxTexSize.Checked = false;
            checkBoxSetTex.Checked = false;
            checkBoxStateBlock.Checked = false;
            checkBoxVshaderCmd.Checked = false;
            checkBoxVshaderConst.Checked = false;
            checkBoxpShaderCmd.Checked = false;
            checkBoxpShaderSize.Checked = false;
            //checkBoxFps.Checked = false;
            winChartViewer1.updateViewPort(true, true);
        }

        private void buttonShowAll_Click(object sender, EventArgs e)
        {
            showCpu = true;
            showCmd = true;
            showDataSize = true;
            showDrawTime = true;
            showFps = true;
            showGpu = true;
            showIbLock = true;
            showIbSize = true;
            showObj = true;
            showParamSize = true;
            showPShaderCmd = true;
            showPShaderConst = true;
            showRemoteParamSize = true;
            showSetTexTime = true;
            showStateBlock = true;
            showSurLock = true;
            showSurSize = true;
            showTexLock = true;
            showTexSize = true;
            showTriangle = true;
            showVbLock = true;
            showVbSize = true;
            showVShaderCmd = true;
            showVShaderConst = true;

            // set the check box false
            checkBoxCpu.Checked = true;
            checkBoxGpu.Checked = true;
            checkBoxCmd.Checked = true;
            checkBoxObj.Checked = true;
            checkBoxTriangle.Checked = true;
            checkBoxDraw.Checked = true;
            checkBoxData.Checked = true;
            checkBoxIbLock.Checked = true;
            checkBoxIbSize.Checked = true;
            checkBoxVbLock.Checked = true;
            checkBoxVbSize.Checked = true;
            checkBoxParamSize.Checked = true;
            checkBoxRemoteParamSize.Checked = true;
            checkBoxSurLock.Checked = true;
            checkBoxSurSize.Checked = true;
            checkBoxTexLock.Checked = true;
            checkBoxTexSize.Checked = true;
            checkBoxSetTex.Checked = true;
            checkBoxStateBlock.Checked = true;
            checkBoxVshaderCmd.Checked = true;
            checkBoxVshaderConst.Checked = true;
            checkBoxpShaderCmd.Checked = true;
            checkBoxpShaderSize.Checked = true;
            checkBoxFps.Checked = true;

            winChartViewer1.updateViewPort(true, true);
        }

        // to get the formula generated by WEKA, (training using all the input file is the selected folder
        private void buttonStartEstimate_Click(object sender, EventArgs e)
        {
            DirectoryInfo dir = new DirectoryInfo(ifbDialog.SelectedPath);
            FileInfo[] files = dir.GetFiles(); // get all files
            Console.WriteLine(dir.FullName +" contains : "+ files.Length + " files, as follows:");
            foreach (FileInfo file in files)
            {
                Console.WriteLine("  " + file.Name);


            }

            // update the chart viewport
            winChartViewer1.updateViewPort(true, true);
        }


        // to show the lines

        // to start the analysis and comparation
        private void buttonStart_Click(object sender, EventArgs e)
        {
            // check the show option
        }

        // save the 
        private void buttonSaveCur_Click(object sender, EventArgs e)
        {

        }
    }
}
